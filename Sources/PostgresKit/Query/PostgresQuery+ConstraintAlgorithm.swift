//import SQLKit
//
//extension PostgresQuery {
//    public struct ConstraintAlgorithm: SQLConstraintAlgorithm {
//        public typealias Expression = PostgresQuery.Expression
//        public typealias ForeignKey = PostgresQuery.ForeignKey
//        public typealias Collation = PostgresQuery.Collation
//        
//        public static var primaryKey: ConstraintAlgorithm {
//            return self.init(.primaryKey(.generated(.byDefault)))
//        }
//        
//        public static func primaryKey(_ default: PrimaryKeyDefault) -> ConstraintAlgorithm {
//            return self.init(.primaryKey(`default`))
//        }
//        
//        public static var notNull: ConstraintAlgorithm {
//            return self.init(.notNull)
//        }
//        
//        public static var unique: ConstraintAlgorithm {
//            return self.init(.unique)
//        }
//        
//        public static func check(_ expression: Expression) -> ConstraintAlgorithm {
//            return self.init(.check(expression))
//        }
//        
//        public static func collate(_ collation: Collation) -> ConstraintAlgorithm {
//            return self.init(.collate(collation))
//        }
//        
//        public static func `default`(_ expression: Expression) -> ConstraintAlgorithm {
//            return self.init(.default(expression))
//        }
//        
//        public static func foreignKey(_ foreignKey: ForeignKey) -> ConstraintAlgorithm {
//            return self.init(.foreignKey(foreignKey))
//        }
//        
//        private enum Storage {
//            case primaryKey(PrimaryKeyDefault?)
//            case notNull
//            case unique
//            case check(Expression)
//            case collate(Collation)
//            case `default`(Expression)
//            case foreignKey(ForeignKey)
//        }
//        
//        private let storage: Storage
//        
//        private init(_ storage: Storage) {
//            self.storage = storage
//        }
//        
//        public func serialize(_ binds: inout [Encodable]) -> String {
//            switch self.storage {
//            case .primaryKey(let d):
//                if let d = d {
//                    return "PRIMARY KEY " + d.serialize(&binds)
//                } else {
//                    return "PRIMARY KEY"
//                }
//            case .notNull: return "NOT NULL"
//            case .unique: return "UNIQUE"
//            case .check(let expression):
//                return "CHECK (" + expression.serialize(&binds) + ")"
//            case .collate(let collation):
//                return "COLLATE " + collation.serialize(&binds)
//            case .default(let expression):
//                return "DEFAULT " + expression.serialize(&binds)
//            case .foreignKey(let foreignKey): return "REFERENCES " + foreignKey.serialize(&binds)
//            }
//        }
//    }
//}
//
//extension PostgresQuery.ConstraintAlgorithm {
//    public enum PrimaryKeyDefault: SQLSerializable {
//        /// `GENERATED BY` methods.
//        public enum Generated {
//            /// `BY DEFAULT`
//            case byDefault
//            /// `ALWAYS`
//            case always
//        }
//        
//        /// `GENERATED BY`
//        case generated(Generated)
//        
//        /// See `SQLSerializable`.
//        public func serialize(_ binds: inout [Encodable]) -> String {
//            switch self {
//            case .generated(let generated):
//                switch generated {
//                case .always: return "GENERATED ALWAYS AS IDENTITY"
//                case .byDefault: return "GENERATED BY DEFAULT AS IDENTITY"
//                }
//            }
//        }
//    }
//}
