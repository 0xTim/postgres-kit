/// PostgreSQL-flavored `SQLSerializer`.
public final class PostgreSQLSerializer: SQLSerializer {
    public typealias Database = PostgreSQLDatabase
    
    /// The current placeholder offset used to create PostgreSQL
    /// placeholders for parameterized queries.
    public var placeholderOffset: Int
    
    /// Creates a new `PostgreSQLSQLSerializer`
    public init() {
        self.placeholderOffset = 1
    }
    
    /// See `SQLSerializer`
    public func serialize(columnType: Query<PostgreSQLDatabase>.ColumnType) -> String {
        var sql: [String] = []
        if columnType.parameters.isEmpty {
            sql.append(columnType.name)
        } else {
            sql.append(columnType.name + "(" + columnType.parameters.joined(separator: ", ") + ")")
        }
        if columnType.primaryKey {
            sql.append("PRIMARY KEY")
        }
        if !columnType.nullable {
            sql.append("NOT NULL")
        }
        if columnType.generatedIdentity {
            sql.append("GENERATED BY DEFAULT AS IDENTITY")
        }
        if let d = columnType.default {
            sql.append("DEFAULT")
            switch d {
            case .computed(let computed): sql.append(serialize(column: computed))
            case .unescaped(let string): sql.append(string)
            }
        }
        return sql.joined(separator: " ")
    }
    
    /// See `SQLSerializer`
    public func makeEscapedString(from string: String) -> String {
        return "\"\(string)\""
    }
    
    /// See `SQLSerializer`
    public func makePlaceholder() -> String {
        defer { placeholderOffset += 1 }
        return "$\(placeholderOffset)"
    }
}
